// test-scheduling-system.ts
import 'reflect-metadata';
import { AppDataSource } from './apps/api/src/database/data-source';
import { SchedulingService } from './apps/api/src/modules/scheduling/scheduling.service';
import { UserEntity } from './apps/api/src/entity/user.entity';

/**
 * Script de teste completo para o sistema de agendamento
 */
async function testSchedulingSystem() {
  console.log('\nüß™ === TESTE COMPLETO DO SISTEMA DE AGENDAMENTO ===');
  console.log('üìÖ Data:', new Date().toISOString());
  console.log('üîß Vers√£o: Sprint 2 Fase 3');

  const totalStartTime = Date.now();

  try {
    // Inicializar conex√£o
    console.log('\nüîå Inicializando conex√£o com banco...');
    if (!AppDataSource.isInitialized) {
      await AppDataSource.initialize();
    }
    console.log('‚úÖ Conex√£o estabelecida');

    // Inicializar servi√ßo
    console.log('\nüõ†Ô∏è Inicializando servi√ßo de agendamento...');
    const schedulingService = new SchedulingService();
    await schedulingService.initialize();
    console.log('‚úÖ Servi√ßo de agendamento inicializado');

    // Mock de usu√°rio para testes
    const mockUser = { id: 1, nome: 'Admin Teste' } as UserEntity;

    // =========================================
    // TESTE 1: VERIFICA√á√ÉO INICIAL DO SISTEMA
    // =========================================
    console.log('\nüìä === TESTE 1: STATUS INICIAL DO SISTEMA ===');
    
    const initialStatus = await schedulingService.getSystemStatus();
    console.log('üìà Status inicial:');
    console.log(`   Sistema habilitado: ${initialStatus.isEnabled ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Agendamentos ativos: ${initialStatus.activeSchedules}`);
    console.log(`   Jobs rodando: ${initialStatus.runningJobs}`);
    console.log(`   Total de execu√ß√µes: ${initialStatus.totalExecutions}`);
    console.log(`   Uptime: ${Math.round(initialStatus.uptime / 1000)}s`);

    // =========================================
    // TESTE 2: CRIAR AGENDAMENTOS DE TESTE
    // =========================================
    console.log('\nüìù === TESTE 2: CRIANDO AGENDAMENTOS ===');
    
    // Agendamento di√°rio
    console.log('üìÖ Criando agendamento di√°rio...');
    const dailySchedule = await schedulingService.createSchedule({
      name: 'Teste ETL Di√°rio',
      description: 'Agendamento de teste para ETL di√°rio √†s 2:00',
      frequency: 'DAILY',
      timeOfDay: '02:00',
      jobType: 'FULL_ETL',
      advancedConfig: {
        onlyIfActiveePeriod: true,
        emailNotifications: false,
        skipIfPreviousRunning: true,
      },
    }, mockUser);

    console.log(`‚úÖ Agendamento di√°rio criado: ID ${dailySchedule.id}`);
    console.log(`   Pr√≥xima execu√ß√£o: ${dailySchedule.nextRunAt?.toISOString()}`);
    console.log(`   Cron: ${dailySchedule.cronExpression}`);

    // Agendamento semanal
    console.log('üìÖ Criando agendamento semanal...');
    const weeklySchedule = await schedulingService.createSchedule({
      name: 'Teste Rec√°lculo Semanal',
      description: 'Rec√°lculo toda segunda e quarta √†s 6:00',
      frequency: 'WEEKLY',
      timeOfDay: '06:00',
      weekDays: {
        monday: true,
        tuesday: false,
        wednesday: true,
        thursday: false,
        friday: false,
        saturday: false,
        sunday: false,
      },
      jobType: 'PARTIAL_RECALCULATION',
    }, mockUser);

    console.log(`‚úÖ Agendamento semanal criado: ID ${weeklySchedule.id}`);
    console.log(`   Pr√≥xima execu√ß√£o: ${weeklySchedule.nextRunAt?.toISOString()}`);
    console.log(`   Cron: ${weeklySchedule.cronExpression}`);

    // =========================================
    // TESTE 3: LISTAR E VERIFICAR AGENDAMENTOS
    // =========================================
    console.log('\nüìã === TESTE 3: LISTANDO AGENDAMENTOS ===');
    
    const allSchedules = await schedulingService.getAllSchedules();
    console.log(`‚úÖ Total de agendamentos encontrados: ${allSchedules.length}`);
    
    allSchedules.forEach((schedule, index) => {
      console.log(`   ${index + 1}. ${schedule.name} (${schedule.frequency}) - Status: ${schedule.status}`);
    });

    // =========================================
    // TESTE 4: BUSCAR AGENDAMENTO ESPEC√çFICO
    // =========================================
    console.log('\nüîç === TESTE 4: BUSCAR AGENDAMENTO ESPEC√çFICO ===');
    
    const foundSchedule = await schedulingService.getScheduleById(dailySchedule.id);
    if (foundSchedule) {
      console.log(`‚úÖ Agendamento encontrado: ${foundSchedule.name}`);
      console.log(`   Descri√ß√£o: ${foundSchedule.description}`);
      console.log(`   Frequ√™ncia: ${foundSchedule.frequency}`);
      console.log(`   Hor√°rio: ${foundSchedule.timeOfDay}`);
      console.log(`   Status: ${foundSchedule.status}`);
      console.log(`   Criado por: ${foundSchedule.createdBy?.nome || 'N/A'}`);
    } else {
      console.log('‚ùå Agendamento n√£o encontrado');
    }

    // =========================================
    // TESTE 5: ATUALIZAR AGENDAMENTO
    // =========================================
    console.log('\n‚úèÔ∏è === TESTE 5: ATUALIZANDO AGENDAMENTO ===');
    
    const updatedSchedule = await schedulingService.updateSchedule(
      dailySchedule.id,
      {
        description: 'Agendamento atualizado pelo teste - Novo hor√°rio 3:00',
        timeOfDay: '03:00',
        jobOptions: { priority: 8 },
      },
      mockUser
    );

    console.log(`‚úÖ Agendamento ${dailySchedule.id} atualizado`);
    console.log(`   Nova descri√ß√£o: ${updatedSchedule.description}`);
    console.log(`   Novo hor√°rio: ${updatedSchedule.timeOfDay}`);
    console.log(`   Nova pr√≥xima execu√ß√£o: ${updatedSchedule.nextRunAt?.toISOString()}`);
    console.log(`   Novo cron: ${updatedSchedule.cronExpression}`);

    // =========================================
    // TESTE 6: HEALTH CHECK DO SISTEMA
    // =========================================
    console.log('\nüè• === TESTE 6: HEALTH CHECK ===');
    
    const healthResult = await schedulingService.healthCheck();
    console.log(`‚úÖ Health check conclu√≠do:`);
    console.log(`   Problemas corrigidos: ${healthResult.fixed}`);
    console.log(`   Erros encontrados: ${healthResult.errors.length}`);
    
    if (healthResult.errors.length > 0) {
      console.log('   üö® Erros detectados:');
      healthResult.errors.forEach((error, index) => {
        console.log(`      ${index + 1}. ${error}`);
      });
    } else {
      console.log('   ‚úÖ Sistema saud√°vel, nenhum erro detectado');
    }

    // =========================================
    // TESTE 7: STATUS FINAL DO SISTEMA
    // =========================================
    console.log('\nüìä === TESTE 7: STATUS FINAL DO SISTEMA ===');
    
    const finalStatus = await schedulingService.getSystemStatus();
    console.log('üìà Status final:');
    console.log(`   Agendamentos ativos: ${finalStatus.activeSchedules}`);
    console.log(`   Jobs rodando: ${finalStatus.runningJobs}`);
    console.log(`   Pr√≥xima execu√ß√£o: ${finalStatus.nextExecution?.toISOString() || 'Nenhuma'}`);
    console.log(`   √öltima execu√ß√£o: ${finalStatus.lastExecution?.toISOString() || 'Nenhuma'}`);

    // =========================================
    // TESTE 8: LIMPEZA (REMOVER AGENDAMENTOS DE TESTE)
    // =========================================
    console.log('\nüßπ === TESTE 8: LIMPEZA ===');
    
    console.log('üóëÔ∏è Removendo agendamentos de teste...');
    await schedulingService.deleteSchedule(dailySchedule.id, mockUser);
    console.log(`‚úÖ Agendamento di√°rio ${dailySchedule.id} removido`);
    
    await schedulingService.deleteSchedule(weeklySchedule.id, mockUser);
    console.log(`‚úÖ Agendamento semanal ${weeklySchedule.id} removido`);

    // Status final ap√≥s limpeza
    const cleanStatus = await schedulingService.getSystemStatus();
    console.log(`‚úÖ Sistema limpo. Agendamentos ativos: ${cleanStatus.activeSchedules}`);

    // =========================================
    // RESULTADO FINAL
    // =========================================
    const totalTime = Date.now() - totalStartTime;
    
    console.log('\nüéâ === TODOS OS TESTES PASSARAM COM SUCESSO ===');
    console.log(`‚è±Ô∏è Tempo total de execu√ß√£o: ${totalTime}ms`);
    console.log('');
    console.log('‚ú® Sistema de agendamento est√° funcionando perfeitamente!');
    console.log('');
    console.log('üöÄ Pr√≥ximos passos:');
    console.log('   1. Iniciar servidor da API: pnpm dev');
    console.log('   2. Acessar Swagger: http://localhost:3001/docs');
    console.log('   3. Testar APIs de agendamento via interface');
    console.log('   4. Configurar agendamentos reais conforme necess√°rio');
    console.log('   5. Monitorar execu√ß√µes via /api/scheduling/system/status');

  } catch (error) {
    console.error('\nüí• === ERRO CR√çTICO NO TESTE ===');
    console.error('Erro:', error);
    
    if (error instanceof Error && error.stack) {
      console.error('\nüìö Stack Trace:');
      console.error(error.stack);
    }
    
    console.error('\nüîß Poss√≠veis solu√ß√µes:');
    console.error('   1. Verificar se shared-types foi compilado');
    console.error('   2. Verificar se todas as entidades est√£o no data-source.ts');
    console.error('   3. Verificar se as depend√™ncias foram instaladas');
    console.error('   4. Verificar se o banco de dados est√° acess√≠vel');
    
    process.exit(1);
  } finally {
    // Fechar conex√£o
    if (AppDataSource && AppDataSource.isInitialized) {
      try {
        await AppDataSource.destroy();
        console.log('\nüîå Conex√£o do banco fechada');
      } catch (error) {
        console.error('‚ùå Erro ao fechar conex√£o:', error);
      }
    }

    console.log('\nüëã Teste finalizado');
  }
}

// Executar teste
testSchedulingSystem().catch(console.error);
