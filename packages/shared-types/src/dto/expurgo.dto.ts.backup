// packages/shared-types/src/dto/expurgo.dto.ts (ATUALIZADO)
import { ExpurgoStatus } from '../enums/expurgo-status.enum';

/**
 * DTO para cria√ß√£o de nova solicita√ß√£o de expurgo
 */
export interface CreateExpurgoDto {
  /** ID do per√≠odo de competi√ß√£o */
  competitionPeriodId: number;

  /** ID do setor onde ocorreu o evento */
  sectorId: number;

  /** ID do crit√©rio afetado pelo evento */
  criterionId: number;

  /** Data em que ocorreu o evento (formato YYYY-MM-DD) */
  dataEvento: string;

  /** Descri√ß√£o detalhada do evento que justifica o expurgo */
  descricaoEvento: string;

  /** Justificativa do solicitante para o expurgo */
  justificativaSolicitacao: string;

  /**
   * Valor num√©rico do ajuste a ser aplicado
   * Negativo para reduzir (ex: -1 quebra, -5 km ociosa)
   * Positivo para aumentar (casos raros)
   */
  valorAjusteNumerico: number;
}

/**
 * DTO para aprova√ß√£o ou rejei√ß√£o de expurgo
 */
export interface ApproveRejectExpurgoDto {
  /** Justificativa do aprovador/rejeitador para a decis√£o */
  justificativaAprovacaoOuRejeicao: string;
}

/**
 * DTO para filtros de busca de expurgos
 */
export interface FindExpurgosDto {
  /** Filtrar por per√≠odo de competi√ß√£o espec√≠fico */
  competitionPeriodId?: number;

  /** Filtrar por setor espec√≠fico */
  sectorId?: number;

  /** Filtrar por crit√©rio espec√≠fico */
  criterionId?: number;

  /** Filtrar por status do expurgo */
  status?: ExpurgoStatus;

  /** Filtrar por data do evento - in√≠cio do range (YYYY-MM-DD) */
  dataEventoInicio?: string;

  /** Filtrar por data do evento - fim do range (YYYY-MM-DD) */
  dataEventoFim?: string;

  /** Filtrar por quem solicitou */
  registradoPorUserId?: number;

  /** Filtrar por quem aprovou/rejeitou */
  aprovadoPorUserId?: number;
}

/**
 * DTO de resposta completa para expurgo (com rela√ß√µes populadas)
 */
export interface ExpurgoResponseDto {
  id: number;

  // Dados do evento
  dataEvento: string;
  descricaoEvento: string;
  justificativaSolicitacao: string;
  valorAjusteNumerico: number;
  status: ExpurgoStatus;

  // Rela√ß√µes - Per√≠odo
  competitionPeriodId: number;
  competitionPeriod?: {
    id: number;
    mesAno: string;
    status: string;
    dataInicio: string;
    dataFim: string;
  };

  // Rela√ß√µes - Setor
  sectorId: number;
  sector?: {
    id: number;
    nome: string;
  };

  // Rela√ß√µes - Crit√©rio
  criterionId: number;
  criterion?: {
    id: number;
    nome: string;
    unidade_medida?: string;
    sentido_melhor?: string;
  };

  // Auditoria - Solicita√ß√£o
  registradoPorUserId: number;
  registradoPor?: {
    id: number;
    nome: string;
    email: string;
  };

  // Auditoria - Aprova√ß√£o/Rejei√ß√£o
  aprovadoPorUserId?: number | null;
  aprovadoPor?: {
    id: number;
    nome: string;
    email: string;
  } | null;
  aprovadoEm?: Date | string | null;
  justificativaAprovacao?: string | null;

  // Timestamps
  createdAt: Date | string;
  updatedAt: Date | string;
}

// ============================================
// üîß FUN√á√ïES DE VALIDA√á√ÉO
// ============================================

/**
 * Valida dados para cria√ß√£o de expurgo
 */
export function validateCreateExpurgo(data: unknown): CreateExpurgoDto {
  if (!data || typeof data !== 'object') {
    throw new Error('Dados de entrada devem ser um objeto');
  }

  const dto = data as Record<string, unknown>;

  // Valida√ß√£o de campos obrigat√≥rios
  const requiredFields = [
    'competitionPeriodId',
    'sectorId',
    'criterionId',
    'dataEvento',
    'descricaoEvento',
    'justificativaSolicitacao',
    'valorAjusteNumerico',
  ];

  for (const field of requiredFields) {
    if (dto[field] === undefined || dto[field] === null || dto[field] === '') {
      throw new Error(`Campo obrigat√≥rio ausente: ${field}`);
    }
  }

  // Valida√ß√µes de tipo
  if (
    !Number.isInteger(dto.competitionPeriodId) ||
    (dto.competitionPeriodId as number) <= 0
  ) {
    throw new Error('competitionPeriodId deve ser um n√∫mero inteiro positivo');
  }

  if (!Number.isInteger(dto.sectorId) || (dto.sectorId as number) <= 0) {
    throw new Error('sectorId deve ser um n√∫mero inteiro positivo');
  }

  if (!Number.isInteger(dto.criterionId) || (dto.criterionId as number) <= 0) {
    throw new Error('criterionId deve ser um n√∫mero inteiro positivo');
  }

  // Valida√ß√£o de data (formato YYYY-MM-DD)
  const dataEventoStr = dto.dataEvento as string;
  if (
    typeof dataEventoStr !== 'string' ||
    !/^\d{4}-\d{2}-\d{2}$/.test(dataEventoStr)
  ) {
    throw new Error('dataEvento deve estar no formato YYYY-MM-DD');
  }

  // Validar se √© uma data v√°lida
  const dataEvento = new Date(dataEventoStr);
  if (isNaN(dataEvento.getTime())) {
    throw new Error('dataEvento deve ser uma data v√°lida');
  }

  // Valida√ß√£o de strings
  if (
    typeof dto.descricaoEvento !== 'string' ||
    dto.descricaoEvento.trim().length < 10
  ) {
    throw new Error('descricaoEvento deve ter pelo menos 10 caracteres');
  }

  if (
    typeof dto.justificativaSolicitacao !== 'string' ||
    dto.justificativaSolicitacao.trim().length < 20
  ) {
    throw new Error(
      'justificativaSolicitacao deve ter pelo menos 20 caracteres'
    );
  }

  // Valida√ß√£o de valor num√©rico
  if (
    typeof dto.valorAjusteNumerico !== 'number' ||
    !isFinite(dto.valorAjusteNumerico)
  ) {
    throw new Error('valorAjusteNumerico deve ser um n√∫mero v√°lido');
  }

  if (dto.valorAjusteNumerico === 0) {
    throw new Error('valorAjusteNumerico n√£o pode ser zero');
  }

  return {
    competitionPeriodId: dto.competitionPeriodId as number,
    sectorId: dto.sectorId as number,
    criterionId: dto.criterionId as number,
    dataEvento: dataEventoStr,
    descricaoEvento: (dto.descricaoEvento as string).trim(),
    justificativaSolicitacao: (dto.justificativaSolicitacao as string).trim(),
    valorAjusteNumerico: dto.valorAjusteNumerico as number,
  };
}

/**
 * Valida dados para aprova√ß√£o/rejei√ß√£o de expurgo
 */
export function validateApproveRejectExpurgo(
  data: unknown
): ApproveRejectExpurgoDto {
  if (!data || typeof data !== 'object') {
    throw new Error('Dados de entrada devem ser um objeto');
  }

  const dto = data as Record<string, unknown>;

  // Validar campo obrigat√≥rio
  if (
    !dto.justificativaAprovacaoOuRejeicao ||
    dto.justificativaAprovacaoOuRejeicao === ''
  ) {
    throw new Error(
      'Campo obrigat√≥rio ausente: justificativaAprovacaoOuRejeicao'
    );
  }

  // Validar tipo e tamanho
  if (typeof dto.justificativaAprovacaoOuRejeicao !== 'string') {
    throw new Error('justificativaAprovacaoOuRejeicao deve ser uma string');
  }

  const justificativa = dto.justificativaAprovacaoOuRejeicao.trim();
  if (justificativa.length < 10) {
    throw new Error(
      'justificativaAprovacaoOuRejeicao deve ter pelo menos 10 caracteres'
    );
  }

  if (justificativa.length > 1000) {
    throw new Error(
      'justificativaAprovacaoOuRejeicao n√£o pode exceder 1000 caracteres'
    );
  }

  return {
    justificativaAprovacaoOuRejeicao: justificativa,
  };
}

/**
 * Valida dados para busca de expurgos
 */
export function validateFindExpurgos(data: unknown): FindExpurgosDto {
  if (!data) {
    return {}; // Filtros s√£o opcionais
  }

  if (typeof data !== 'object') {
    throw new Error('Filtros devem ser um objeto');
  }

  const dto = data as Record<string, unknown>;
  const result: FindExpurgosDto = {};

  // Validar IDs opcionais
  if (dto.competitionPeriodId !== undefined) {
    if (
      !Number.isInteger(dto.competitionPeriodId) ||
      (dto.competitionPeriodId as number) <= 0
    ) {
      throw new Error(
        'competitionPeriodId deve ser um n√∫mero inteiro positivo'
      );
    }
    result.competitionPeriodId = dto.competitionPeriodId as number;
  }

  if (dto.sectorId !== undefined) {
    if (!Number.isInteger(dto.sectorId) || (dto.sectorId as number) <= 0) {
      throw new Error('sectorId deve ser um n√∫mero inteiro positivo');
    }
    result.sectorId = dto.sectorId as number;
  }

  if (dto.criterionId !== undefined) {
    if (
      !Number.isInteger(dto.criterionId) ||
      (dto.criterionId as number) <= 0
    ) {
      throw new Error('criterionId deve ser um n√∫mero inteiro positivo');
    }
    result.criterionId = dto.criterionId as number;
  }

  // Validar status
  if (dto.status !== undefined) {
    if (!Object.values(ExpurgoStatus).includes(dto.status as ExpurgoStatus)) {
      throw new Error(
        `status deve ser um de: ${Object.values(ExpurgoStatus).join(', ')}`
      );
    }
    result.status = dto.status as ExpurgoStatus;
  }

  // Validar datas opcionais
  if (dto.dataEventoInicio !== undefined) {
    if (
      typeof dto.dataEventoInicio !== 'string' ||
      !/^\d{4}-\d{2}-\d{2}$/.test(dto.dataEventoInicio)
    ) {
      throw new Error('dataEventoInicio deve estar no formato YYYY-MM-DD');
    }
    result.dataEventoInicio = dto.dataEventoInicio;
  }

  if (dto.dataEventoFim !== undefined) {
    if (
      typeof dto.dataEventoFim !== 'string' ||
      !/^\d{4}-\d{2}-\d{2}$/.test(dto.dataEventoFim)
    ) {
      throw new Error('dataEventoFim deve estar no formato YYYY-MM-DD');
    }
    result.dataEventoFim = dto.dataEventoFim;
  }

  return result;
}
