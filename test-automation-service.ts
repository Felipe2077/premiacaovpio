// test-automation-service.ts (na raiz do projeto - VERS√ÉO COMPLETA E CORRIGIDA)
import * as dotenv from 'dotenv';
import path from 'path';
import 'reflect-metadata';
import { AppDataSource } from './apps/api/src/database/data-source';
import { AutomationService } from './apps/api/src/modules/automation/automation.service';
import { ExpurgoService } from './apps/api/src/modules/expurgos/expurgo.service';

// Carregar .env da API
const envPath = path.resolve(__dirname, 'apps/api/.env');
dotenv.config({ path: envPath });
console.log(`[Test Automation] .env carregado de: ${envPath}`);

/**
 * Script de teste para o AutomationService integrado com ExpurgoService
 * Substitui os 3 scripts manuais originais + testa hooks de expurgo
 */
async function testAutomationService() {
  console.log('üöÄ === TESTE COMPLETO DO SISTEMA DE AUTOMA√á√ÉO ===');

  try {
    // 1. Inicializar banco de dados
    if (!AppDataSource.isInitialized) {
      console.log('[Test] Inicializando AppDataSource...');
      await AppDataSource.initialize();
      console.log('[Test] ‚úÖ AppDataSource inicializado');
    }

    // 2. Instanciar servi√ßos
    const automationService = new AutomationService();
    const expurgoService = new ExpurgoService();

    // 3. Verificar vig√™ncia ativa
    console.log('\nüìã === VERIFICANDO VIG√äNCIA ATIVA ===');
    const activePeriod = await automationService.getActivePeriodInfo();

    if (!activePeriod) {
      console.error('‚ùå Nenhuma vig√™ncia ativa encontrada!');
      console.log(
        'üí° Certifique-se de que existe uma vig√™ncia com status ATIVA no banco de dados.'
      );
      console.log(
        "üí° SQL para criar: INSERT INTO competition_periods (mesAno, dataInicio, dataFim, status) VALUES ('2025-06', '2025-06-01', '2025-06-30', 'ATIVA');"
      );
      return;
    }

    console.log(`‚úÖ Vig√™ncia ativa encontrada:`);
    console.log(`   ID: ${activePeriod.id}`);
    console.log(`   Per√≠odo: ${activePeriod.mesAno}`);
    console.log(`   Data In√≠cio: ${activePeriod.dataInicio}`);
    console.log(`   Data Fim: ${activePeriod.dataFim}`);
    console.log(`   Status: ${activePeriod.status}`);

    // 4. Teste integra√ß√£o com ExpurgoService
    console.log('\nüîó === TESTE DE INTEGRA√á√ÉO EXPURGO-AUTOMA√á√ÉO ===');
    const expurgoAutomationTest =
      await expurgoService.testAutomationConnectivity();

    console.log(
      `Sistema de automa√ß√£o pronto: ${expurgoAutomationTest.isReady ? '‚úÖ' : '‚ùå'}`
    );
    console.log(
      `Per√≠odo ativo detectado: ${expurgoAutomationTest.activePeriod || 'Nenhum'}`
    );

    if (expurgoAutomationTest.error) {
      console.warn(`‚ö†Ô∏è  Erro na conectividade: ${expurgoAutomationTest.error}`);
    }

    // 5. Teste de valida√ß√£o
    console.log('\nüîç === TESTE DE VALIDA√á√ÉO ===');
    try {
      const validatedPeriod =
        await automationService.validateAndGetActivePeriod();
      console.log(
        `‚úÖ Valida√ß√£o passou: Per√≠odo ${validatedPeriod.mesAno} √© v√°lido para opera√ß√µes`
      );
    } catch (error) {
      console.error(
        `‚ùå Valida√ß√£o falhou:`,
        error instanceof Error ? error.message : error
      );
      return;
    }

    // 6. Teste de atualiza√ß√£o completa
    console.log('\nüîÑ === TESTE DE ATUALIZA√á√ÉO COMPLETA ===');
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Isto vai executar ETL real nos dados!');
    console.log('üéØ Processando vig√™ncia:', activePeriod.mesAno);

    const startTime = Date.now();

    const result = await automationService.runFullUpdateForActivePeriod({
      triggeredBy: 'manual',
      userId: 999, // ID de teste
    });

    const totalTime = Date.now() - startTime;

    // 7. Exibir resultados
    console.log('\nüìä === RESULTADOS DA ATUALIZA√á√ÉO COMPLETA ===');
    if (result.success) {
      console.log('‚úÖ Atualiza√ß√£o completa executada com SUCESSO!');
      console.log(`üìà Estat√≠sticas:`);
      console.log(`   Per√≠odo processado: ${result.periodMesAno}`);
      console.log(
        `   Tempo de execu√ß√£o: ${result.executionTimeMs}ms (${(result.executionTimeMs / 1000).toFixed(2)}s)`
      );
      console.log(`   Registros RAW: ${result.recordsProcessed.rawRecords}`);
      console.log(
        `   Registros Performance: ${result.recordsProcessed.performanceRecords}`
      );
      console.log(
        `   Registros Ranking: ${result.recordsProcessed.rankingRecords}`
      );
      console.log(`   Disparado por: ${result.triggeredBy}`);
      console.log(`   Usu√°rio: ${result.userId}`);
    } else {
      console.error('‚ùå Atualiza√ß√£o FALHOU!');
      console.error(`Erro: ${result.error}`);
      console.error(`Tempo at√© falha: ${result.executionTimeMs}ms`);
    }

    // 8. Teste de rec√°lculo parcial
    console.log('\nüîÑ === TESTE DE REC√ÅLCULO PARCIAL ===');
    console.log('Simulando aprova√ß√£o de expurgo...');

    const partialResult = await automationService.runPartialRecalculation({
      triggeredBy: 'expurgo',
      userId: 999,
    });

    if (partialResult.success) {
      console.log('‚úÖ Rec√°lculo parcial executado com SUCESSO!');
      console.log(
        `‚ö° Tempo de execu√ß√£o: ${partialResult.executionTimeMs}ms (${(partialResult.executionTimeMs / 1000).toFixed(2)}s)`
      );
    } else {
      console.error('‚ùå Rec√°lculo parcial FALHOU!');
      console.error(`Erro: ${partialResult.error}`);
    }

    // 9. Teste do hook de automa√ß√£o (simula√ß√£o)
    console.log('\nü™ù === TESTE DO HOOK DE EXPURGO ===');
    try {
      console.log('Simulando aprova√ß√£o de expurgo (sem expurgo real)...');

      // Simular chamada do hook
      const mockExpurgoId = 999;
      const mockApprovingUserId = 999;

      console.log(`Testando hook para expurgo ID ${mockExpurgoId}...`);

      // Este teste apenas verifica se o sistema est√° pronto
      const hookReady = await expurgoService.isSystemReadyForAutomation();

      if (hookReady) {
        console.log('‚úÖ Hook de automa√ß√£o est√° pronto para ser usado');
        console.log(
          'üí° Quando um expurgo real for aprovado, o rec√°lculo ser√° disparado automaticamente'
        );
      } else {
        console.warn('‚ö†Ô∏è  Hook n√£o est√° pronto (sem vig√™ncia ativa)');
      }
    } catch (error) {
      console.error('‚ùå Erro no teste do hook:', error);
    }

    // 10. Relat√≥rio final
    console.log('\nüéâ === RESUMO DOS TESTES ===');
    console.log(`‚è±Ô∏è  Tempo total de teste: ${(totalTime / 1000).toFixed(2)}s`);
    console.log('‚úÖ Sistema de automa√ß√£o totalmente funcional!');
    console.log('\nüìã Funcionalidades testadas:');
    console.log('   ‚úÖ Busca de vig√™ncia ativa');
    console.log('   ‚úÖ Valida√ß√£o de prote√ß√µes');
    console.log('   ‚úÖ ETL completo automatizado');
    console.log('   ‚úÖ Rec√°lculo parcial');
    console.log('   ‚úÖ Integra√ß√£o com ExpurgoService');
    console.log('   ‚úÖ Hook de automa√ß√£o pronto');
    console.log('\nüöÄ Pr√≥ximos passos:');
    console.log('   1. Testar via API: POST /api/automation/trigger-update');
    console.log('   2. Aprovar um expurgo real para testar hook autom√°tico');
    console.log('   3. Implementar Fase 2 (Sistema de Queue)');
    console.log('\nüîß APIs dispon√≠veis:');
    console.log('   GET  /api/automation/status');
    console.log('   GET  /api/automation/active-period');
    console.log('   POST /api/automation/trigger-update');
    console.log('   POST /api/automation/validate-period');
    console.log('   GET  /api/expurgos/automation/status');
  } catch (error) {
    console.error('\nüí• === ERRO CR√çTICO NO TESTE ===');
    console.error(error);

    if (error instanceof Error && error.stack) {
      console.error('\nüìö Stack Trace:');
      console.error(error.stack);
    }
  } finally {
    // Fechar conex√£o
    if (AppDataSource && AppDataSource.isInitialized) {
      await AppDataSource.destroy();
      console.log('\nüîå Conex√£o do banco fechada');
    }

    console.log('\nüëã Teste finalizado');
  }
}

// Verificar argumentos da linha de comando
const args = process.argv.slice(2);
const skipConfirmation =
  args.includes('--skip-confirmation') || args.includes('-y');

if (!skipConfirmation) {
  console.log(
    '‚ö†Ô∏è  ATEN√á√ÉO: Este script vai executar ETL real nos dados da vig√™ncia ativa!'
  );
  console.log('üí° Para pular esta confirma√ß√£o, use: --skip-confirmation ou -y');
  console.log('üõë Pressione Ctrl+C para cancelar ou Enter para continuar...');

  process.stdin.once('data', () => {
    testAutomationService();
  });
} else {
  testAutomationService();
}

// ===================================
// COMANDOS PARA EXECUTAR:
// ===================================
/*

# Executar com confirma√ß√£o
pnpm exec ts-node -P apps/api/tsconfig.json -r tsconfig-paths/register test-automation-service.ts

# Executar direto (sem confirma√ß√£o) 
pnpm exec ts-node -P apps/api/tsconfig.json -r tsconfig-paths/register test-automation-service.ts -y

# Ou adicionar no package.json da API:
"scripts": {
  "test:automation": "ts-node -r tsconfig-paths/register test-automation-service.ts",
  "test:automation:force": "ts-node -r tsconfig-paths/register test-automation-service.ts -y"
}

# Depois usar:
cd apps/api && pnpm test:automation

# ===================================
# TESTES VIA API (ap√≥s servidor rodando):
# ===================================

# Status geral
curl http://localhost:3001/api/automation/status

# Vig√™ncia ativa  
curl http://localhost:3001/api/automation/active-period

# Disparo manual (CUIDADO: executa ETL real!)
curl -X POST http://localhost:3001/api/automation/trigger-update \
  -H "Content-Type: application/json" \
  -d '{"triggeredBy": "manual", "userId": 1}'

# Rec√°lculo parcial
curl -X POST http://localhost:3001/api/automation/trigger-update \
  -H "Content-Type: application/json" \
  -d '{"triggeredBy": "manual", "userId": 1, "partialUpdate": true}'

# Status automa√ß√£o de expurgos
curl http://localhost:3001/api/expurgos/automation/status

*/
