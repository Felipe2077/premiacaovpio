// apps/api/src/plugins/auth.plugin.ts - CORREÇÃO MÍNIMA
import jwt from '@fastify/jwt'; // IMPORTAÇÃO NECESSÁRIA
import fp from '@fastify/plugin'; // ADICIONAR ESTA LINHA NO TOPO

import { FastifyInstance, FastifyReply, FastifyRequest } from 'fastify';

// === INTERFACES PARA RESOLVER TIPOS ===
export interface JwtPayload {
  userId: number;
  email: string;
  roleNames: string[];
  iat?: number;
  exp?: number;
}

export interface AuthenticatedUser {
  id: number;
  email: string;
  name: string;
  roleNames: string[];
}

// CORREÇÃO: Estender FastifyRequest e FastifyInstance
declare module 'fastify' {
  interface FastifyRequest {
    user?: AuthenticatedUser;
  }

  interface FastifyInstance {
    authenticate: (
      request: FastifyRequest,
      reply: FastifyReply
    ) => Promise<void>;
    verifyJWT: (request: FastifyRequest, reply: FastifyReply) => Promise<void>;
    generateToken: (payload: JwtPayload) => string;
    verifyToken: (token: string) => JwtPayload;
  }
}

async function authPlugin(fastify: FastifyInstance) {
  // Registrar plugin JWT
  await fastify.register(jwt, {
    secret:
      process.env.JWT_SECRET ||
      'your-super-secret-jwt-key-change-in-production',
    sign: {
      algorithm: 'HS256',
      expiresIn: process.env.JWT_EXPIRES_IN || '24h',
    },
    verify: {
      algorithms: ['HS256'],
    },
    // CORREÇÃO: Tipar os parâmetros corretamente
    errorResponseBuilder: function (request: FastifyRequest, context: any) {
      return {
        code: 'UNAUTHORIZED',
        error: 'Token inválido ou expirado',
        message: context.message || 'Falha na autenticação',
        statusCode: 401,
      };
    },
  });

  // Registrar plugin de auth
  await fastify.register(fp);

  // Utilitários JWT - CORREÇÃO: usar fastify.jwt corretamente
  fastify.decorate('generateToken', (payload: JwtPayload): string => {
    return fastify.jwt.sign(payload);
  });

  fastify.decorate('verifyToken', (token: string): JwtPayload => {
    return fastify.jwt.verify(token) as JwtPayload;
  });

  // Middleware JWT
  fastify.decorate(
    'verifyJWT',
    async function (request: FastifyRequest, reply: FastifyReply) {
      try {
        const authHeader = request.headers.authorization;

        if (!authHeader) {
          return reply.code(401).send({
            error: 'Token de acesso necessário',
            code: 'MISSING_TOKEN',
          });
        }

        const tokenMatch = authHeader.match(/^Bearer\s+(.+)$/);
        if (!tokenMatch) {
          return reply.code(401).send({
            error: 'Formato de token inválido. Use: Bearer <token>',
            code: 'INVALID_TOKEN_FORMAT',
          });
        }

        const token = tokenMatch[1];

        let decoded: JwtPayload;
        try {
          decoded = fastify.jwt.verify(token) as JwtPayload; // CORREÇÃO: tipo correto
        } catch (jwtError: any) {
          return reply.code(401).send({
            error: 'Token inválido ou expirado',
            code: 'INVALID_TOKEN',
            details: jwtError.message,
          });
        }

        // Aqui você pode adicionar validação adicional do usuário se necessário
        request.user = {
          id: decoded.userId,
          email: decoded.email,
          name: '', // Buscar do banco se necessário
          roleNames: decoded.roleNames || [],
        };
      } catch (error) {
        fastify.log.error('Erro na verificação JWT:', error);
        return reply.code(500).send({
          error: 'Erro interno na autenticação',
          code: 'AUTH_INTERNAL_ERROR',
        });
      }
    }
  );

  // Middleware principal
  fastify.decorate(
    'authenticate',
    async function (request: FastifyRequest, reply: FastifyReply) {
      await fastify.verifyJWT(request, reply);
      fastify.log.info(
        `Usuário autenticado: ${request.user?.email} (ID: ${request.user?.id})`
      );
    }
  );

  fastify.log.info('🔐 Plugin de autenticação carregado com sucesso');
}

export default fp(authPlugin, {
  name: 'auth-plugin',
});
