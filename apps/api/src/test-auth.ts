// apps/api/src/test-auth.ts
import 'reflect-metadata';
import { AppDataSource } from './database/data-source';
import { AuthService } from './services/auth.service';

/**
 * Script de teste b√°sico para validar a implementa√ß√£o de autentica√ß√£o
 * Execute: npx ts-node src/test-auth.ts
 */

async function testAuth() {
  console.log('üß™ Iniciando testes b√°sicos de autentica√ß√£o...');

  try {
    // 1. Conectar ao banco
    if (!AppDataSource.isInitialized) {
      await AppDataSource.initialize();
      console.log('‚úÖ Conectado ao banco de dados');
    }

    // 2. Instanciar AuthService
    const authService = new AuthService();
    console.log('‚úÖ AuthService instanciado');

    // 3. Teste de health check
    console.log('\nüè• Testando health check...');
    const health = await authService.healthCheck();
    console.log('Health:', health);

    // 4. Teste de login v√°lido
    console.log('\nüîê Testando login v√°lido...');
    try {
      const loginResult = await authService.login(
        {
          email: 'diretor@viacaopioneira.com',
          password: 'Pioneira@2025',
        },
        '127.0.0.1',
        'test-agent'
      );

      console.log('‚úÖ Login realizado com sucesso!');
      console.log('üìã Dados do usu√°rio:', {
        id: loginResult.user.id,
        nome: loginResult.user.nome,
        email: loginResult.user.email,
        roles: loginResult.user.roles,
        permissions: loginResult.user.permissions.slice(0, 5), // Primeiras 5 para n√£o poluir
        sessionId: loginResult.sessionId,
      });

      // 5. Teste de permiss√£o
      console.log('\nüõ°Ô∏è Testando verifica√ß√£o de permiss√£o...');
      const hasPermission = await authService.userHasPermission(
        loginResult.user.id,
        'manage_users'
      );
      console.log('Tem permiss√£o para gerenciar usu√°rios:', hasPermission);

      // 6. Teste de sess√µes
      console.log('\nüì± Testando listagem de sess√µes...');
      const sessions = await authService.getUserSessions(loginResult.user.id);
      console.log(`Sess√µes ativas: ${sessions.length}`);

      // 7. Teste de logout
      console.log('\nüëã Testando logout...');
      await authService.logout(loginResult.sessionId, loginResult.user.id);
      console.log('‚úÖ Logout realizado com sucesso!');
    } catch (error) {
      console.error('‚ùå Erro no teste de login:', error.message);
    }

    // 8. Teste de login inv√°lido
    console.log('\nüö´ Testando login inv√°lido...');
    try {
      await authService.login(
        {
          email: 'diretor@viacaopioneira.com',
          password: 'senhaerrada',
        },
        '127.0.0.1',
        'test-agent'
      );
      console.log('‚ùå ERRO: Login inv√°lido deveria ter falhado!');
    } catch (error) {
      console.log('‚úÖ Login inv√°lido rejeitado corretamente:', error.message);
    }

    // 9. Teste de usu√°rio inexistente
    console.log('\nüëª Testando usu√°rio inexistente...');
    try {
      await authService.login(
        {
          email: 'usuario.inexistente@test.com',
          password: 'qualquersenha',
        },
        '127.0.0.1',
        'test-agent'
      );
      console.log('‚ùå ERRO: Usu√°rio inexistente deveria ter falhado!');
    } catch (error) {
      console.log(
        '‚úÖ Usu√°rio inexistente rejeitado corretamente:',
        error.message
      );
    }

    // 10. Teste de busca de usu√°rio
    console.log('\nüîç Testando busca de usu√°rio...');
    const user = await authService.getUserById(1);
    if (user) {
      console.log('‚úÖ Usu√°rio encontrado:', {
        id: user.id,
        nome: user.nome,
        email: user.email,
        roles: user.roles,
      });
    } else {
      console.log('‚ùå Usu√°rio n√£o encontrado');
    }

    console.log('\nüéâ Todos os testes b√°sicos conclu√≠dos!');
  } catch (error) {
    console.error('üí• Erro nos testes:', error);
    throw error;
  } finally {
    // Fechar conex√£o
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy();
      console.log('üîå Conex√£o com banco fechada');
    }
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  testAuth()
    .then(() => {
      console.log('‚úÖ Testes finalizados com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Falha nos testes:', error);
      process.exit(1);
    });
}

export { testAuth };
