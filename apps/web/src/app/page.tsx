// apps/web/src/app/page.tsx (VERS√ÉO REFATORADA COM HOOK)
'use client';

import FilterControls from '@/components/filters/FilterControls';
import { TooltipProvider } from '@/components/ui/tooltip';

import PerformanceTable from '@/components/competition/PerformanceTable';
import PointsTable from '@/components/competition/PointsTable';
import RankingTable from '@/components/competition/RankingTable';
import { useCompetitionData } from '@/hooks/useCompetitionData'; // <-- IMPORTAR HOOK

export default function HomePage() {
  const {
    rankingData,
    // detailedResults, // N√£o precisamos passar para DetailedResultsTable se ele j√° est√° em resultsBySector
    activeCriteria,
    resultsBySector,
    uniqueCriteria,
    isLoading, // Estado de loading combinado
    error, // Estado de erro combinado
  } = useCompetitionData();

  // As fun√ß√µes de formata√ß√£o e estilo agora est√£o em lib/utils ou dentro de DetailedResultsTable

  return (
    <TooltipProvider>
      <main className='container mx-auto px-4 lg:px-6 flex flex-col gap-8 flex-1'>
        {/* Exibi√ß√£o de Erro Geral (vindo do hook) */}
        {error && (
          <p className='text-red-500 text-center font-semibold mb-4'>
            Erro ao carregar dados:
            {error instanceof Error ? error.message : 'Erro desconhecido'}
          </p>
        )}

        <section>
          <div className='flex justify-between mt-4 mb-2 items-center'>
            <div>
              <h2 className='text-2xl font-semibold my-1'>üèÜ Ranking Atual</h2>
              <p className='text-sm text-gray-600 dark:text-gray-400 italic mb-3'>
                Classifica√ß√£o final baseada na soma dos pontos por crit√©rio
                (Menor pontua√ß√£o = Melhor posi√ß√£o).
              </p>
            </div>

            <FilterControls />
          </div>

          {/* Passa os dados e estados do hook para o componente */}
          <RankingTable
            data={rankingData}
            isLoading={isLoading} // Usa isLoading combinado
            error={error} // Passa o erro combinado (componente pode decidir n√£o mostrar)
          />
        </section>

        {/* --- NOVA SE√á√ÉO: Desempenho vs Meta --- */}
        <section>
          <h2 className='text-2xl font-semibold mb-3'>üìà Desempenho vs Meta</h2>
          <PerformanceTable
            resultsBySector={resultsBySector}
            uniqueCriteria={uniqueCriteria}
            activeCriteria={activeCriteria} // Passa activeCriteria para a l√≥gica de progresso/cor
            isLoading={isLoading}
            error={error}
          />
        </section>
        {/* --------------------------------------- */}
        {/* Se√ß√£o Detalhes por Crit√©rio */}
        <section>
          <h2 className='text-2xl font-semibold mb-3'>
            üìä Desempenho Detalhado por Crit√©rio
          </h2>
          {/* Passa os dados e estados do hook para o componente */}
          <PointsTable
            resultsBySector={resultsBySector}
            uniqueCriteria={uniqueCriteria}
            activeCriteria={activeCriteria} // Passa crit√©rios ativos para l√≥gica de cor
            isLoading={isLoading} // Usa isLoading combinado
            error={error} // Passa erro combinado
          />
        </section>

        {/* Link admin */}
        <div className='mt-10 text-center'></div>
      </main>
    </TooltipProvider>
  );
}
